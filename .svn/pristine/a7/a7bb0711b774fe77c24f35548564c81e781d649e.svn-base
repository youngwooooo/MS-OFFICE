package kr.or.ddit.file.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.file.vo.FileVO;
import net.coobird.thumbnailator.Thumbnailator;



@Controller
public class FileController {
	private static Logger logger = LoggerFactory.getLogger(FileController.class);
	
	@GetMapping("/file/fileForm")
	public void fileFrom() {
		logger.info("upload ajax");
	}
	
	// 특정한 파일 이름 받아서 이미지 데이터 전송
	@GetMapping("/display")
	@ResponseBody
	public ResponseEntity<byte[]> getFile(String fileOrginlNm) {
		logger.info("fileOrginlNm", fileOrginlNm);
		File file = new File("C:\\eGovFrameDev-3.10.0-64bit\\workspace\\Groupware\\src\\main\\webapp\\resources\\upload\\"+ fileOrginlNm);
		logger.info("file", file);
		ResponseEntity<byte[]> result = null;
		try {
			HttpHeaders header = new HttpHeaders();
			header.add("Content-Type", Files.probeContentType(file.toPath()));
			result = new ResponseEntity<>(FileCopyUtils.copyToByteArray(file),header,HttpStatus.OK);
		}catch (IOException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	// 첨부 파일 다운로드
	// APPLICATION_OCTET_STREAM_VALUE : MIME 타입의 파일로 요청이 옴
	// chrome브라우저와 달리 IE에서는 한글이름이 제대로 다운로드 X -> 인코딩방식이 다르기 때문
	//  - @RequestHeader("User-Agent") : HTTP 헤더 메시지 중 디바이스의 정보를 알 수 있는 헤더 
	@GetMapping(value = "/download", produces=MediaType.APPLICATION_OCTET_STREAM_VALUE)
	@ResponseBody
	public ResponseEntity<Resource> downloadFile(@RequestHeader("User-Agent")String userAgent, String fileOrginlNm) {
		logger.info("Download file", fileOrginlNm);
		
		Resource resource = new FileSystemResource("C:\\eGovFrameDev-3.10.0-64bit\\workspace\\Groupware\\src\\main\\webapp\\resources\\upload\\" +  fileOrginlNm);
		logger.info("resource", resource);
		
		if(resource.exists() == false) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		
		String resourceName = resource.getFilename();
		logger.info("resourceName : " + resourceName);
		
		// UUID붙은 부분 제거
		String resourceOriginalName = resourceName.substring(resourceName.indexOf("_") + 1);
		
		// HttpHeaders 객체를 이용해서 다운로드 시 파일의 이름을 처리
		HttpHeaders headers = new HttpHeaders();
		
		try {
			headers.add("Content-Disposition", "attachment; filename=" + new String(resourceName.getBytes("UTF-8"), "ISO-8859-1") );
		}catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		return new ResponseEntity<Resource>(resource, headers, HttpStatus.OK);
		
	}
	
	// 파일 업로드
	@ResponseBody
	@RequestMapping(value="/file/fileAjaxAction",method=RequestMethod.POST)
	public ResponseEntity<List<FileVO>> fileAjaxPost(MultipartFile[] uploadFile) {
		List<FileVO> list = new ArrayList<>();
		
		// 폴더에 파일 저장 -> web.xml 설정 
		String fileFolder="C:\\eGovFrameDev-3.10.0-64bit\\workspace\\Groupware\\src\\main\\webapp\\resources\\upload\\";
		
		// 폴더 경로 -> getFolder()함수로 오늘 날짜의 경로를 문자열로 생성
		String fileFolderPath = getFolder();

		// 생성된 경로는 폴더 경로로 수정된 뒤 반환
		File fileCours = new File(fileFolder, fileFolderPath);
		
		// upload 폴더 생성
		if(fileCours.exists() == false) { // 폴더가 존재하지 않으면
			fileCours.mkdirs(); // mkdirs()로 여러 폴더 생성
		}
		
		for (MultipartFile multipartFile : uploadFile) {
			logger.info("------------------------------------------");
			logger.info("Upload File Name : " + multipartFile.getOriginalFilename());
			
			FileVO fileVO = new FileVO();
			
			long size = multipartFile.getSize();
			String fileSize = size + "";
			// C:\\users\\test.jsp
			String uploadfileName = multipartFile.getOriginalFilename();
			
			// test.jsp -> 전체 파일 경로가 전송되므로 마지막\\를 기준으로 잘라낸 문자열
			uploadfileName = uploadfileName.substring(uploadfileName.lastIndexOf("\\")+1);
			
			// 확장자
			String extsn = uploadfileName.substring(uploadfileName.lastIndexOf(".")+1);
			
			fileVO.setFileSize(fileSize);
			fileVO.setFileOrginlNm(uploadfileName);
			fileVO.setExtsn(extsn);
			
			// 중복 방지를 위한 UUID 적용
			UUID fileNm = UUID.randomUUID();
			uploadfileName = fileNm.toString() + "_" + uploadfileName; 
			
			
			try {
				// 업로드 되는 원래 파일의 이름으로  C드라이브 upload폴더에 원래 이름으로 저장
				File saveFile = new File(fileCours, uploadfileName);
				
				// 업로드 되는 파일 저장하는 방법 transferTo() 이용
				multipartFile.transferTo(saveFile);
				fileVO.setFileNm(fileNm.toString());
				fileVO.setFileCours(fileFolderPath);
								
				
				 // 이미지 파일인지 확인
				if(checkImageType(saveFile)) {
					// 이미지 파일을 업로드 하면 원본파일 + 's_'로 시작하는 섬네일 파일 생성
					// thumbnail-> pom.xml 추가 (이미지 크기나 해상도 직접 조절)
					
					fileVO.setImage(true);
					
					FileOutputStream thumbnail = new FileOutputStream(new File(fileCours, "s_" + uploadfileName));
					Thumbnailator.createThumbnail(multipartFile.getInputStream(), thumbnail, 100, 100);
					
					thumbnail.close();
				}
				
				list.add(fileVO);
				
			}catch (Exception e) {
				e.printStackTrace();
			}
		}
		return new ResponseEntity<>(list,HttpStatus.OK);
	}
	
	// 첨부파일 삭제
	@RequestMapping(value="/file/deleteFile",method=RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<String> deleteFile(String fileOrginlNm, String type) {
		logger.info("deleteFile:" + fileOrginlNm);
		File file;
		
		try {
			file = new File("C:\\eGovFrameDev-3.10.0-64bit\\workspace\\Groupware\\src\\main\\webapp\\resources\\upload\\" + URLDecoder.decode(fileOrginlNm, "UTF-8"));
			file.delete();
			if(type.contentEquals("image")) {
				String largeFileName = file.getAbsolutePath().replace("s_", "");
				file = new File(largeFileName);
				
				file.delete();
			}
		}catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<String>("deleted",HttpStatus.OK);
	}
	
	
	// 파일업로드 연도 월 일 폴더 처리
	// /upload/2021/08/13/
	public String getFolder() {
		//날짜 포맷 객체
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		//오늘 날짜 객체(java.util)
		Date date = new Date();
		//오늘 날짜를 yyyy-MM-dd 형식으로 처리
		String str = sdf.format(date);
		//연/월/일 단위의 폴더를 생성
		return str.replace("-", File.separator);		
	}
	
	// 이미지 파일 판단 
	private boolean checkImageType(File file) {
		
		try {
			String contentType = Files.probeContentType(file.toPath());
			return contentType.startsWith("image");
		}catch(IOException e){
			e.printStackTrace();
		}
		return false;
	}
}
